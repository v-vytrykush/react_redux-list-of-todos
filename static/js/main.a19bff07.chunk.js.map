{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","store/actions.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["API_URL","getAllTodos","a","fetch","response","json","getUserById","userId","SeeFiltered","remove","id","method","addTodo","headers","body","JSON","stringify","title","Math","floor","random","completed","SET_TODOS","ADD_TODOS","SET_USER","setUserAction","payload","type","getTodosSelector","state","todos","getUsersSelector","user","TodoList","dispatch","useDispatch","useSelector","useState","filter","setFilter","selectFilter","setSelectFilter","filteredByTitle","todo","active","all","includes","loadTodosFromServer","todosFromServer","useEffect","getUser","userFromServ","console","log","addNewTodo","deleteTodo","className","onClick","value","onChange","event","target","map","classNames","checked","readOnly","CurrentUser","name","email","phone","App","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a19bff07.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getAllTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUserById(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n\nexport const remove = async (id: number) => {\n  const response = await fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n\n  return response;\n};\n\nexport const addTodo = async () => {\n  const response = await fetch(`${API_URL}/todos`,\n    {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        title: 'One is the loneliest number',\n        userId: Math.floor(Math.random() * 20) + 1,\n        completed: false,\n      }),\n    });\n\n  return response;\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addTodo,\n  getAllTodos,\n  getUserById,\n  remove,\n} from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector, getUsersSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\nenum SeeFiltered {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUsersSelector);\n\n  const [filter, setFilter] = useState('');\n  const [selectFilter, setSelectFilter] = useState('all');\n\n  const filteredByState\n    = todos.filter(todo => {\n      if (todo.completed === true && selectFilter === SeeFiltered.completed) {\n        return true;\n      }\n\n      if (todo.completed === false && selectFilter === SeeFiltered.active) {\n        return true;\n      }\n\n      if (selectFilter === SeeFiltered.all) {\n        return true;\n      }\n\n      return false;\n    });\n\n  const filteredByTitle\n    = filteredByState.filter(todo => todo.title.includes(filter));\n\n  const loadTodosFromServer = async () => {\n    const todosFromServer = await getAllTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServ = await getUserById(id);\n\n      dispatch(setUserAction(userFromServ));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const addNewTodo = async () => {\n    await addTodo();\n    await loadTodosFromServer();\n  };\n\n  const deleteTodo = async (id: number) => {\n    await remove(id);\n    await loadTodosFromServer();\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <button\n        className=\"TodoList__user-button button is-succes\"\n        data-cy=\"userButton\"\n        type=\"button\"\n        onClick={() => {\n          addNewTodo();\n        }}\n      >\n        add Todo\n      </button>\n\n      <br />\n\n      <input\n        className=\"input\"\n        type=\"text\"\n        data-cy=\"filterByTitle\"\n        value={filter}\n        onChange={event => {\n          setFilter(event.target.value);\n        }}\n      />\n\n      <div className=\"select\">\n        <select\n          value={selectFilter}\n          onChange={event => {\n            setSelectFilter(event.target.value);\n          }}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames('TodoList__item', {\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className={`TodoList__user-button button mgr-small ${user?.id === todo.userId && 'TodoList__user-button--selected'}`}\n                  data-cy=\"userButton\"\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"TodoList__user-button button is-danger\"\n                  data-cy=\"userButton\"\n                  type=\"button\"\n                  onClick={() => {\n                    deleteTodo(todo.id);\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Action, Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODOS = 'ADD_TODOS';\nexport const SET_USER = 'ADD_USER';\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const addTodosAction = (payload: Todo): Action => ({\n  type: ADD_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null): Action => ({\n  type: SET_USER,\n  payload,\n});\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getUsersSelector = (state: State) => state.user;\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsersSelector } from '../../store/selectors';\nimport { setUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUsersSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>Error: User not found</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <button\n        className=\"\n              TodoList__user-button\n              TodoList__user-button--red\n              button\n            \"\n        type=\"button\"\n        onClick={() => {\n          dispatch(setUserAction(null));\n        }}\n      >\n        clear\n      </button>\n\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {user.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\n\nimport { Action, State } from '../react-app-env';\nimport { ADD_TODOS, SET_USER, SET_TODOS } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case ADD_TODOS:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}